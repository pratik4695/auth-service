import json

import grpc
from django.conf import settings

import staffing_pb2
import staffing_pb2_grpc
import staffing_user_pb2
import staffing_user_pb2_grpc
from core.grpc_exceptions import ValidationError
from core.logger import LoggerMeta
from core.protobuf_to_dict import dict_to_protobuf, protobuf_to_dict


class GrpcTask(LoggerMeta):
    """
    Base class containing core logic related to making Grpc calls to a MicroService
    Class variables:
        microservice_ip (str) - The ip address for connecting to the microservice
        microservice_port (str) - The port on which the microservice is running
        service_class (obj) - The service stub class which defines the methods that can be called on the service
        pb2 (obj) - The protobuf file generated by the protocol buffer compiler.
                    Used for converting data -> protobuf format
        rpc_name (str) - The name of the rpc_name method that is to be called. Should be as per rpc_name definitions
                         in staffing.proto file
        request_proto (str) - The name of the request message proto format as defined in the staffing.proto file.
        is_streaming_response (bool) - Whether the rpc returns a stream or a single object
    """
    microservice_ip = None
    microservice_port = None
    service_class = None
    pb2 = None
    rpc_name = None
    request_proto = None
    is_streaming_response = False
    return_error = False

    def __init__(self):
        self.meta_data = None
        self.data = None
        super().__init__()

    def get_metadata(self):
        """Override this method to pass in data about the user who is calling the Rpc
        return: Dict
        Allowed keys: ("id", "first_name", "last_name", "name", "user_type", "entity_id")"""
        raise NotImplemented("Override the \'get_metadata\' method.")

    def get_data(self):
        """Override this method to pass in the data that is to be sent to the Rpc"""
        raise NotImplemented("Override the \'get_data\' method.")

    def get_channel(self):
        """Returns a channel over which communication can be done with the Microservice"""
        return grpc.insecure_channel('{0}:{1}'.format(self.microservice_ip, self.microservice_port))

    def get_service(self):
        """Create a service instance over the channel"""
        channel = self.get_channel()
        return self.service_class(channel)

    def get_request_proto(self):
        """
        Override this, if wanna apply some logic on request_proto retrieval
        :return: String
        """
        return self.request_proto

    def get_rpc(self):
        """
        Override this, if wanna apply some logic on rpc_name retrieval
        :return: String
        """
        return self.rpc_name

    def __validate_metadata(self, value):
        if not isinstance(value, dict):
            self.log_error("Expected dict, {} provided".format(type(value)))
            return False
        _allowed_fields = ("id", "first_name", "last_name", "name", "user_type", "entity_id", "platform")
        for key in value.keys():
            if key not in _allowed_fields:
                self.log_error("Invalid identifier {} in value".format(key))
                return False
        return True

    def _validate(self):
        # Metadata Sanity Check
        if not self.__validate_metadata(self.meta_data):
            return False
        # Rpc Name Sanity Check
        if not self.rpc_name:
            self.log_error("\'rpc_name\' cannot be empty/null.")
            return False
        # Custom Validation Checks
        if not self.validate():
            return False
        return True

    def validate(self):
        """
        Override this if extra validation needs to be done.
        :return:
        """
        return True

    def _get_data(self):
        """Converts the dictionary data format to the protobuf format that is actually transmitted"""
        proto = getattr(self.pb2, self.request_proto)
        return dict_to_protobuf(proto, values=self.data)

    def _get_metadata(self):
        """Converts the metadata dict into required format for rpc before sending"""
        from core.constants import PlatformType
        return [('user', json.dumps(self.meta_data)), ('platform', str(PlatformType.AASAANJOBS))]

    def call_grpc(self):
        """Makes a grpc call to the microservice instance"""
        self.rpc_name = self.get_rpc()
        self.request_proto = self.get_request_proto()
        self.meta_data = self.get_metadata()
        self.data = self.get_data()
        if not self._validate():
            return
        try:
            self.log("Attempting to call Grpc \'{0}\' of {1}:{2} with request data: {3} and meta-data: {4}"
                     "".format(self.rpc_name, self.microservice_ip, self.microservice_port, self.data,
                               self.meta_data))
            service_instance = self.get_service()
            rpc = getattr(service_instance, self.rpc_name)
            response = rpc(self._get_data(), metadata=self._get_metadata())
            if hasattr(response, '__iter__'):
                res = []
                for _ in response:
                    res.append(protobuf_to_dict(_))
            else:
                res = protobuf_to_dict(response)
            self.log("Grpc Call {0} Successful!".format(self.rpc_name))
            return res
        except Exception as e:
            if self.return_error:
                rpc_error = e._state.details
                error_list = eval(rpc_error)
                error = " ".join(error_list)
                raise ValidationError(error)
            self.log_error("Grpc call {0} failed: Error {1}".format(self.rpc_name, str(e)))
            return None


class StaffingGrpcTask(GrpcTask):
    """Base class containing core logic related to making Grpc calls to the Staffing MicroService"""
    microservice_ip = settings.STAFFINGS_SERVICE_IP
    microservice_port = settings.STAFFING_SERVICE_PORT
    service_class = staffing_pb2_grpc.StaffingServiceStub
    pb2 = staffing_pb2


class StaffingUserGrpcTask(GrpcTask):
    """Base class containing core logic related to making Grpc calls to the Staffing User MicroService"""
    microservice_ip = settings.STAFFINGS_USER_SERVICE_IP
    microservice_port = settings.STAFFING_USER_SERVICE_PORT
    service_class = staffing_user_pb2_grpc.StaffingUserServiceStub
    pb2 = staffing_user_pb2
